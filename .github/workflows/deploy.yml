name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment (e.g., dev, qa, prod)'
        required: true
        default: 'dev'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Set up Terraform CLI
      uses: hashicorp/setup-terraform@v3

    - name: Load Environment Variables
      run: |
        ENV="${{ github.event.inputs.environment }}"
        echo "ENV=$ENV" >> $GITHUB_ENV
        source modules/env/${ENV}.env
        echo "TF_ENV=$environment" >> $GITHUB_ENV
        echo "TF_BACKEND_RG=$backend_rg" >> $GITHUB_ENV
        echo "TF_BACKEND_STORAGE=$backend_storage" >> $GITHUB_ENV
        echo "TF_CONTAINER_NAME=$container_name" >> $GITHUB_ENV
        echo "TF_LOCATION=$location" >> $GITHUB_ENV

    - name: Terraform Init
      run: |
        cd modules
        terraform init -reconfigure \
          -backend-config="resource_group_name=${TF_BACKEND_RG}" \
          -backend-config="storage_account_name=${TF_BACKEND_STORAGE}" \
          -backend-config="container_name=${TF_CONTAINER_NAME}" \
          -backend-config="key=${TF_ENV}.terraform.tfstate"

    - name: Terraform Plan
      run: |
        cd modules
        ls -la
        terraform plan -lock-timeout=60s -var-file="${TF_ENV}.tfvars"

    - name: Terraform Apply
      run: |
        cd modules
        terraform apply -auto-approve -var-file="${TF_ENV}.tfvars"
